var tableGenerator = tableGenerator || {};

!function() {
    var Utils = tableGenerator.Utils = {};
    Utils.updateRowNum = function(rows, newRowNum) {
        var gap = newRowNum - rows.length;
        if (0 > gap) var newRows = rows.slice(0, gap); else for (var newRows = rows.slice(0), i = 0; gap > i; i++) {
            newRows.push([]);
            for (var j = 0; j < rows[0].length; j++) newRows[newRows.length - 1].push("");
        }
        return newRows;
    }, Utils.updateColNum = function(rows, newColNum) {
        var gap = newColNum - rows[0].length;
        if (0 > gap) var newRows = rows.map(function(row) {
            return row.slice(0, gap);
        }); else var newRows = rows.map(function(row) {
            for (var i = 0; gap > i; i++) row.push("");
            return row;
        });
        return newRows;
    }, Utils.range = function(startNum, endNum, step) {
        var array = [];
        array[0] = startNum;
        for (var step = step || 1; endNum >= startNum + step; ) array[array.length] = startNum += step;
        return array;
    }, Utils.uniqueCount = function(array) {
        var uniqueArray = [], count = 0;
        return $.each(array, function(idx, el) {
            uniqueArray.indexOf(el) < 0 && (count += 1, uniqueArray.push(el));
        }), count;
    }, Utils.max = function(array) {
        return Math.max.apply(null, array);
    };
}();

var tableGenerator = tableGenerator || {};

!function() {
    var Utils = tableGenerator.Utils, Convert = tableGenerator.Convert = {};
    Convert.toHTMLTags = function(rows, header) {
        var openingTags = "<table>\n	<tbody>", innerTags = "";
        $.each(rows, function(rowIdx, row) {
            innerTags += "\n		<tr>", 0 == rowIdx && header ? $.each(row, function(idx, cell) {
                innerTags += "\n			<th>" + cell + "</th>";
            }) : $.each(row, function(idx, cell) {
                innerTags += "\n			<td>" + cell + "</td>";
            }), innerTags += "\n		</tr>";
        });
        var closingTags = "\n	</tbody>\n</table>";
        return openingTags + innerTags + closingTags;
    }, Convert.toJSON = function(rows, header) {
        if (header) {
            var rowsWithHeaders = [], headers = rows[0], dataRows = rows.slice(1);
            return Utils.uniqueCount(headers) !== headers.length ? "/* Fill headers with unique values first! */" : ($.each(dataRows, function(dataRowIdx, dataRow) {
                rowsWithHeaders[dataRowIdx] = {}, $.each(dataRow, function(dataCellIdx, dataCell) {
                    rowsWithHeaders[dataRowIdx][headers[dataCellIdx]] = dataCell;
                });
            }), JSON.stringify(rowsWithHeaders));
        }
        return JSON.stringify(rows);
    }, Convert.toMarkdown = function(rows, header) {
        var result = "";
        return $.each(rows, function(rowIdx, row) {
            if (result += "|", $.each(row, function(idx, cell) {
                result += cell + "|";
            }), result += "\n", 0 == rowIdx && header) {
                result += "|";
                for (var i = 0; i < row.length; i++) result += "---|";
                result += "\n";
            }
        }), result;
    };
}();

var tableGenerator = tableGenerator || {};

!function() {
    var Utils = tableGenerator.Utils;
    tableGenerator.TableSize = React.createClass({
        displayName: "TableSize",
        MAX_ROW_COL_NUM: 12,
        updateTableSize: function(newColNum, newRowNum) {
            var newRows = Utils.updateRowNum(this.props.rows, newRowNum);
            newRows = Utils.updateColNum(newRows, newColNum), this.emptyTableGrid(), this.props.onSubmit(), 
            this.props.onTableSizeChange(newRows);
        },
        drawTableGrid: function(colNum, rowNum, isFixed) {
            this.emptyTableGrid();
            var className = isFixed ? "fixed" : "filled";
            isFixed || this.showInfo(), $rowsToPaint = $(".grid-row").slice(0, rowNum), $rowsToPaint.each(function(rowIdx, row) {
                $cellsToPaint = $(row).find(".grid-cell").slice(0, colNum), $cellsToPaint.each(function(colIdx, cell) {
                    $(cell).addClass(className);
                });
            });
        },
        emptyTableGrid: function() {
            $(".grid-cell").removeClass("filled"), this.hideInfo();
        },
        showInfo: function() {
            $info = $("#grid-info"), $info.removeClass("hidden");
        },
        hideInfo: function() {
            $("#grid-info").addClass("hidden");
        },
        handleInfo: function(colIdx, rowIdx, event) {
            $info.css({
                left: event.pageX + 10,
                top: event.pageY + 10
            }), $info.text(colIdx + " X " + rowIdx);
        },
        componentDidMount: function() {
            var currentColNum = this.props.rows[0].length, currentRowNum = this.props.rows.length;
            this.drawTableGrid(currentColNum, currentRowNum, !0);
        },
        componentDidUpdate: function() {
            $(".fixed").removeClass("fixed");
            var currentColNum = this.props.rows[0].length, currentRowNum = this.props.rows.length;
            this.drawTableGrid(currentColNum, currentRowNum, !0);
        },
        render: function() {
            var that = this, tableSizes = Utils.range(1, this.MAX_ROW_COL_NUM), gridRows = tableSizes.map(function(size, rowIdx) {
                var gridCells = tableSizes.map(function(size, colIdx) {
                    return React.createElement("div", {
                        onMouseOver: that.drawTableGrid.bind(this, colIdx + 1, rowIdx + 1, !1),
                        onMouseOut: that.emptyTableGrid,
                        onClick: that.updateTableSize.bind(this, colIdx + 1, rowIdx + 1),
                        onMouseMove: that.handleInfo.bind(this, colIdx + 1, rowIdx + 1),
                        className: "grid-cell"
                    });
                });
                return React.createElement("div", {
                    className: "grid-row"
                }, gridCells);
            });
            return React.createElement("div", {
                id: "table-size",
                className: "nav-item"
            }, React.createElement("a", {
                href: "javascript:void(0)",
                onClick: this.props.onClick
            }, "Table Size:", " " + that.props.rows[0].length, " X ", that.props.rows.length, React.createElement("i", {
                className: "material-icons"
            }, "")), React.createElement("div", {
                className: "dropdown",
                id: "table-size-grid"
            }, gridRows, React.createElement("span", {
                id: "grid-info",
                className: "hidden"
            })));
        }
    });
}();

var tableGenerator = tableGenerator || {};

!function() {
    tableGenerator.TableMenu = React.createClass({
        displayName: "TableMenu",
        THEMES: [ "base16_ocean_dark", "base16_ocean_light" ],
        toggleHeader: function() {
            this.props.onChange({
                header: !this.props.header
            }), this.props.onSubmit();
        },
        toggleColHeader: function() {
            var that = this;
            this.props.onChange({
                colHeader: !that.props.colHeader
            }), this.props.onSubmit();
        },
        changeTheme: function(event) {
            var targetTheme = event.target.id, newCssFileName = "css/" + targetTheme + ".css", targetLink = $("link[href='" + newCssFileName + "']");
            $("link.theme").attr("disabled", !0), $(targetLink).attr("disabled", !1), this.props.onChange({
                currentTheme: targetTheme
            }), this.props.onSubmit();
        },
        render: function() {
            var that = this, themeLis = this.THEMES.map(function(theme) {
                return React.createElement("li", null, React.createElement("a", {
                    id: theme,
                    href: "javascript:void(0)",
                    onClick: that.changeTheme,
                    className: that.props.currentTheme == theme ? "checked" : ""
                }, theme));
            });
            return React.createElement("div", {
                id: "table-menu",
                className: "nav-item"
            }, React.createElement("a", {
                href: "javascript:void(0)",
                onClick: this.props.onClick
            }, "Table", React.createElement("i", {
                className: "material-icons"
            }, "")), React.createElement("ul", {
                className: "dropdown hidden",
                id: "table-dropdown"
            }, React.createElement("li", null, React.createElement("a", {
                href: "javascript:void(0)",
                onClick: this.toggleHeader,
                className: this.props.header ? "checked" : ""
            }, "Headers on top row")), React.createElement("li", null, React.createElement("a", {
                href: "javascript:void(0)",
                onClick: this.toggleColHeader,
                className: this.props.colHeader ? "checked" : ""
            }, "Headers on first column")), React.createElement("li", null, React.createElement("a", {
                href: "javascript:void(0)"
            }, "Theme"), React.createElement("ul", null, themeLis))));
        }
    });
}();

var tableGenerator = tableGenerator || {};

!function() {
    var Utils = tableGenerator.Utils;
    tableGenerator.TableItem = React.createClass({
        displayName: "TableItem",
        getInitialState: function() {
            return {
                cellValue: this.props.cellValue
            };
        },
        handleChange: function(event) {
            var textArea = event.target, $textArea = $(textArea), initialHeight = $textArea.height(), allTextAreasInRow = $textArea.parent().siblings().andSelf().find("textarea");
            $textArea.css({
                height: "auto"
            });
            var scrollHeight = textArea.scrollHeight - 16;
            if (scrollHeight > initialHeight) $textArea.parent().siblings().andSelf().find("textarea").height(scrollHeight); else if (initialHeight > scrollHeight) {
                allTextAreasInRow.css({
                    height: "auto"
                });
                var allScrollHeights = allTextAreasInRow.map(function(idx, tA) {
                    return tA.scrollHeight;
                }), maxScrollHeight = Utils.max(allScrollHeights);
                allTextAreasInRow.height(maxScrollHeight - 16);
            } else $textArea.height(initialHeight);
            this.setState({
                cellValue: textArea.value
            });
        },
        handleSubmit: function(event) {
            this.props.onSubmit(), this.props.onBlur(event);
        },
        render: function() {
            return React.createElement("textarea", {
                onFocus: this.props.onFocus,
                onBlur: this.handleSubmit,
                onChange: this.handleChange,
                value: this.state.cellValue,
                rows: "1",
                spellCheck: "false"
            });
        }
    });
}();

var tableGenerator = tableGenerator || {};

!function() {
    var TableItem = tableGenerator.TableItem;
    tableGenerator.Utils;
    tableGenerator.Table = React.createClass({
        displayName: "Table",
        handleEdit: function(event) {
            $parent = $(event.target).parent(), $parent.hasClass("editing") ? $parent.removeClass("editing") : $parent.addClass("editing");
        },
        render: function() {
            var that = this, rows = this.props.rows.map(function(row, rowIndex) {
                var cells = $.map(row, function(cell, colIdx) {
                    if (0 === rowIndex && that.props.header) return React.createElement("th", null, React.createElement(TableItem, {
                        onFocus: that.handleEdit,
                        onBlur: that.handleEdit,
                        onSubmit: that.props.onSubmit,
                        cellValue: cell
                    }));
                    var className = 0 === colIdx && that.props.colHeader ? "ch" : "";
                    return React.createElement("td", {
                        className: className
                    }, React.createElement(TableItem, {
                        onFocus: that.handleEdit,
                        onBlur: that.handleEdit,
                        onSubmit: that.props.onSubmit,
                        cellValue: cell
                    }));
                });
                return React.createElement("tr", null, cells);
            });
            return React.createElement("table", {
                id: "table"
            }, React.createElement("tbody", null, rows));
        }
    });
}();

var tableGenerator = tableGenerator || {};

!function() {
    var OPTIONS = [ "HTML", "JSON", "Markdown" ], LANGUAGES_MAP = {
        HTML: "markup",
        JSON: "javascript",
        Markdown: "markdown"
    }, Convert = tableGenerator.Convert;
    tableGenerator.Output = React.createClass({
        displayName: "Output",
        getOutputResult: function() {
            var rows = this.props.rows;
            switch (this.props.currentOutput) {
              case "HTML":
                return Convert.toHTMLTags(rows, this.props.header);

              case "JSON":
                return Convert.toJSON(rows, this.props.header);

              case "Markdown":
                return Convert.toMarkdown(rows, this.props.header);
            }
        },
        render: function() {
            var that = this, optionAnchors = OPTIONS.map(function(option) {
                return React.createElement("a", {
                    href: "javascript:void(0)",
                    key: option,
                    onClick: that.props.onChange.bind(this, option),
                    className: that.props.currentOutput == option ? "selected" : ""
                }, option);
            }), outputResult = this.getOutputResult(), langName = LANGUAGES_MAP[this.props.currentOutput];
            return React.createElement("div", {
                id: "output"
            }, React.createElement("nav", null, optionAnchors), React.createElement("code", {
                className: "language-" + langName
            }, outputResult));
        }
    });
}();

var tableGenerator = tableGenerator || {};

!function() {
    var Table = tableGenerator.Table, UpperNav = tableGenerator.UpperNav, Output = tableGenerator.Output, Utils = tableGenerator.Utils, App = tableGenerator.App = React.createClass({
        displayName: "App",
        getInitialState: function() {
            return {
                title: void 0,
                header: !0,
                colHeader: !0,
                rows: [ [ "", "", "" ], [ "", "", "" ], [ "", "", "" ], [ "", "", "" ] ],
                currentOutput: "HTML",
                currentTheme: "base16_ocean_dark"
            };
        },
        getRows: function() {
            var $table = $("table"), rows = [];
            $table.find("tr").each(function(index) {
                var $cells = $(this).find("th, td");
                rows[index] = [], $cells.each(function() {
                    rows[index].push($(this).find("textarea").val());
                });
            }), this.setState({
                rows: rows
            });
        },
        updateRows: function(newRows) {
            this.setState({
                rows: newRows
            }, this.resizeTextAreas.bind(this));
        },
        resizeTextAreas: function() {
            $("tr").each(function(idx, tr) {
                var textAreas = $(tr).find("textarea");
                textAreas.css({
                    height: "auto"
                });
                var scrollHeights = textAreas.map(function(idx, tA) {
                    return tA.scrollHeight;
                }), maxScrollHeight = Utils.max(scrollHeights);
                textAreas.height(maxScrollHeight - 16);
            });
        },
        updateOutputOption: function(newOption) {
            this.setState({
                currentOutput: newOption
            });
        },
        componentDidMount: function() {
            window.addEventListener("resize", this.resizeTextAreas);
        },
        componentDidUpdate: function() {
            Prism.highlightAll();
        },
        render: function() {
            return React.createElement("div", {
                id: "app"
            }, React.createElement("section", {
                id: "main"
            }, React.createElement(UpperNav, {
                rows: this.state.rows,
                header: this.state.header,
                colHeader: this.state.colHeader,
                currentTheme: this.state.currentTheme,
                onChange: this.setState.bind(this),
                onTableSizeChange: this.updateRows
            }), React.createElement(Table, {
                header: this.state.header,
                colHeader: this.state.colHeader,
                rows: this.state.rows,
                onSubmit: this.getRows
            }), React.createElement(Output, {
                header: this.state.header,
                rows: this.state.rows,
                onChange: this.updateOutputOption,
                currentOutput: this.state.currentOutput
            })));
        }
    });
    React.render(React.createElement(App, null), document.getElementById("app"));
}();